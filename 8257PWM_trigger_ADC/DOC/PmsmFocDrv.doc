=============================================================================
List of generated methods in project: PmsmFocDrv

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "PWMC1"     (bean PWMMC)
   - PWMC1_Load -Apply last setting of the methods <SetDuty>, <SetDutyPercent>, both <SetRatio*>, <SetPeriod> and 
                <SetPrescaler>.   Version specific information for Freescale HCS08 and ColdFireV1 derivatives ]   On FTM 
                peripheral on HCS08 and ColdFireV1 derivatives, <SetPrescaler> is applied immediately and it is not affected by 
                this method.
   - PWMC1_OutputPadEnable -Method enables output pads.
   - PWMC1_OutputPadDisable -Method disables output pads.

Module "eFPWM1"    (bean Init_eFlexPWM_56800)
   - eFPWM1_Init -This method initializes registers of the eFlexPWM module according to this Peripheral Initialization settings.
                Call this method in the user code to initialize the module. By default, the method is called by PE 
                automatically; see "Call Init method" property of the component for more details.

Module "MFR1"      (bean DSP_Func_MFR)
   - MFR1_abs_s -The abs_s function calculates the 16-bit absolute value of the input value.
   - MFR1_add -The add function adds two 16-bit fractional numbers (x + y).
   - MFR1_div_s -The div_s function divides two fractional numbers (x / y); x and y must be positive and y must be greater than 
                or equal to x.
   - MFR1_mac_r -The mac function multiplies two 16-bit fractional input values (x * y) and adds the 32-bit result to w.
   - MFR1_msu_r -The msu function multiplies x by y and subtracts the 32-bit result from w.
   - MFR1_mult -This multiplication function multiply two fractional input values and return the result.
   - MFR1_mult_r -This multiplication function multiply two fractional input values and return the result. The function differs 
                from mult in that function rounds the result, whereas mult truncates the result to 16bits.
   - MFR1_negate -The negate function negates the fractional input value.
   - MFR1_round -The round function rounds the 32-bit fractional input value to 16 bits.
   - MFR1_shl -The shl function arithmetically shifts the input variable x left n positions, zero filling the least significant 
                bits of the result. If n is negative, the shl function arithmetically shifts x right by -n bits with sign 
                extension.
   - MFR1_shr -The shr function arithmetically shifts the input variable x right n positions, sign extending the result. If n 
                is negative, the shr function arithmetically shifts x left by -n bits, zero filling the least significant bits.
   - MFR1_shr_r -The shr_r function arithmetically shifts the input variable x right n positions, sign extending the result. If 
                n is negative, the shr_r function arithmetically shifts x left by -n bits, zero filling the least significant 
                bits. shr_r differs from shr in that shr_r rounds the 32-bit fractional result.
   - MFR1_sub -The sub function calculates (x - y).
   - MFR1_L_abs -The L_abs function calculates the 32-bit absolute value of the input value.
   - MFR1_L_add -The add function adds two 32-bit fractional numbers (x + y).
   - MFR1_div_ls -The div_ls function divides two fractional numbers (x / y); x and y must be positive and y must be greater 
                than or equal to x.
   - MFR1_L_mac -The mac function multiplies two 16-bit fractional input values (x * y) and adds the 32-bit result to w.
   - MFR1_L_msu -The msu function multiplies x by y and subtracts the 32-bit result from w.
   - MFR1_L_mult -This multiplication function multiply two fractional input values and return the result.
   - MFR1_L_mult_ls -This multiplication function multiply two fractional input values and return the result. The function 
                differs from mult in that function rounds the result, whereas mult truncates the result to 16bits.
   - MFR1_L_negate -The negate function negates the fractional input value.
   - MFR1_L_shl -The L_shl function arithmetically shifts the input variable x left n positions, zero filling the least 
                significant bits of the result. If n is negative, the shl function arithmetically shifts x right by -n bits 
                with sign extension.
   - MFR1_L_shr -The L_shr function arithmetically shifts the input variable x right n positions, sign extending the result. If 
                n is negative, the L_shr function arithmetically shifts x left by -n bits, zero filling the least significant 
                bits.
   - MFR1_L_shr_r -The L_shr_r function arithmetically shifts the input variable x right n positions, sign extending the result.
                If n is negative, the L_shr_r function arithmetically shifts x left by -n bits, zero filling the least 
                significant bits. L_shr_r differs from L_shr in that L_shr_r rounds the 32-bit fractional result.
   - MFR1_L_deposit_h -The L_deposit_h function places a 16-bit fractional value into the most significant 16-bits of the 
                32-bit fractional output value and zeroes the least significant 16 bits.
   - MFR1_L_deposit_l -The L_deposit_l function places a 16-bit fractional value into the least significant 16 bits of the 
                32-bit fractional output value and sign extends the most significant 16 bits.
   - MFR1_L_sub -The L_sub function calculates (x - y).
   - MFR1_extract_h -The extract_h function extracts the most significant 16 bits from the 32-bit fractional value.
   - MFR1_extract_l -The extract_l function extracts the least significant 16 bits from the 32-bit fractional value.
   - MFR1_norm_s -The norm function calculates the number of left shifts needed to normalize a fractional value.
   - MFR1_norm_l -The norm function calculates the number of left shifts needed to normalize a fractional value.
   - MFR1_mfr32Sqrt -The function calculates the square root of the fractional input data value. This method cannot be disabled 
                if Use Assembler Files property is enabled.

Module "AD1"       (bean ADC)
   - AD1_Enable -Enables A/D converter bean. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this method 
                switches on A/D converter device, voltage reference, etc.
   - AD1_Disable -Disables A/D converter bean. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_EnableIntTrigger -Enables the internal trigger mode. A conversion of all channels that are set in the component 
                inspector will be launched by an internal sync pulse. If the <Number of conversions> is greater than 1, a 
                conversion will be launched more than once (by an internal signal) according to <Number of conversions>. It's 
                possible to disable the trigger mode by <Stop> method.  Version specific information for other derivatives than 
                Freescale HCS12 and HCS12X ]   This EnableIntTrigger method is available only when the <Internal trigger> 
                property is enabled. Version specific information for HCS12/HCS12X derivatives ]   This EnableIntTrigger method 
                is available only when the <Internal trigger> property and <Autoscan mode> properties are both enabled.
   - AD1_GetValue16 -This method returns the last measured values of all channels justified to the left. Compared with 
                <GetValue> method this method returns more accurate result if the <number of conversions> is greater than 1 and 
                <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "WDog1"     (bean WatchDog)
   - WDog1_Enable -Enables the component - starts the watchdog timer counting. 
   - WDog1_Clear -Clears the watchdog timer (it makes the timer restart from zero).

Module "Hall_U"    (bean ExtInt)
   - Hall_U_GetVal -Returns the actual value of the input pin of the component.
   - Hall_U_SetEdge -Sets the edge type for this component that generates the interrupt.

Module "Hall_V"    (bean ExtInt)
   - Hall_V_GetVal -Returns the actual value of the input pin of the component.
   - Hall_V_SetEdge -Sets the edge type for this component that generates the interrupt.

Module "Hall_W"    (bean ExtInt)
   - Hall_W_GetVal -Returns the actual value of the input pin of the component.
   - Hall_W_SetEdge -Sets the edge type for this component that generates the interrupt.

Module "HallTmr"   (bean FreeCntr)
   - HallTmr_Reset -This method resets the timer-counter (sets to zero for up-counting HW or to appropriate value for 
                down-counting HW). The method is available only if the counter register can be set by software and the counter 
                is not shared.
   - HallTmr_GetCounterValue -This method returns a content of the counter.

Module "PC_M1"     (bean PC_Master)

Module "XBAR1"     (bean CrossbarSwitch)

Module "DA1"       (bean DAC)
   - DA1_SetValue -This method sets values of all channels.

Module "SYS_EN"    (bean BitIO)
   - SYS_EN_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "REVorTEMP" (bean BitIO)
   - REVorTEMP_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Resolver"  (bean SynchroMaster)
   - Resolver_Enable -Enable the component - it starts send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent"). This method cannot be disabled if the Fault mode is enabled. It's intended for 
                re-enabling the module if fault occurred. For more information please see the <"Fault mode" >property .
   - Resolver_Disable -Disable the component - it stops the send and receive functions. No events will be generated. Note: When 
                this method is called while a transmission is in progress, the data being transmitted/received may be lost.
   - Resolver_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA 
                controller is available on selected CPU and receiver is configured to use DMA controller then this method only 
                sets the selected DMA channel. Status of the DMA transfer can then be checked using method GetCharsInRxBuf. See 
                typical usage for details about communication using DMA.
   - Resolver_SendChar -Sends one character to the channel. Version specific information for Freescale 56800 derivatives ]   
                DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured to use DMA 
                controller then this method only sets the selected DMA channel. The status of the DMA transfer can then be 
                checked using GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - Resolver_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is 
                disabled, and the Ignore empty character is set to yes, and a character has been received, then this method 
                returns 1 although it was an empty character. Version specific information for Freescale 56800 derivatives ]   
                DMA mode:  If DMA controller is available on the selected CPU and the receiver is configured to use DMA 
                controller then this method returns the number of characters in the receive buffer.
   - Resolver_GetCharsInTxBuf -Returns the number of characters in the output buffer. Version specific information for 
                Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the 
                transmitter is configured to use DMA controller then this method returns the number of characters in the 
                transmit buffer.
   - Resolver_PutSSVal -The value to drive on the SS pin. This method is not available if <Automatic mode> of SS pin is enabled 
                or <Strobe mode> of SS pin is enabled. This method is available only if <SS pin direction> is set to Output.

Module "Cpu"       (bean 56F8257)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_GetResetSource -Gets low byte of the reset status register.
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.  For more information about the wait mode see this CPU documentation.  
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.  For more information about the stop mode see this CPU documentation.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. Adding read wait states for external program memory can 
                cause delay extension as well. The method is independent on selected speed mode.

===================================================================================
