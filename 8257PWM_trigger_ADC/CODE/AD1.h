/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : AD1.H
**     Project   : PmsmFocDrv
**     Processor : MC56F8257
**     Component : ADC
**     Version   : Component 01.580, Driver 02.05, CPU db: 3.00.231
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 2014/4/25, 9:32
**     Abstract  :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings  :
**         AD control register         : ADC_CTRL1   [F080]
**         AD control register         : ADC_CTRL2   [F081]
**         AD control register         : ADC_ZXCTRL  [F082]
**         AD control register         : ADC_CLIST1  [F083]
**         AD control register         : ADC_CLIST2  [F084]
**         AD control register         : ADC_SDIS    [F087]
**         AD control register         : ADC_STAT    [F088]
**         AD control register         : ADC_LIMSTAT [F08A]
**         AD control register         : ADC_ZXSTAT  [F08B]
**         AD control register         : ADC_LOLIM0  [F09C]
**         AD control register         : ADC_LOLIM1  [F09D]
**         AD control register         : ADC_LOLIM2  [F09E]
**         AD control register         : ADC_LOLIM3  [F09F]
**         AD control register         : ADC_LOLIM4  [F0A0]
**         AD control register         : ADC_LOLIM5  [F0A1]
**         AD control register         : ADC_LOLIM6  [F0A2]
**         AD control register         : ADC_LOLIM7  [F0A3]
**         AD control register         : ADC_HILIM0  [F0A4]
**         AD control register         : ADC_HILIM1  [F0A5]
**         AD control register         : ADC_HILIM2  [F0A6]
**         AD control register         : ADC_HILIM3  [F0A7]
**         AD control register         : ADC_HILIM4  [F0A8]
**         AD control register         : ADC_HILIM5  [F0A9]
**         AD control register         : ADC_HILIM6  [F0AA]
**         AD control register         : ADC_HILIM7  [F0AB]
**         AD control register         : ADC_OFFST0  [F0AC]
**         AD control register         : ADC_OFFST1  [F0AD]
**         AD control register         : ADC_OFFST2  [F0AE]
**         AD control register         : ADC_OFFST3  [F0AF]
**         AD control register         : ADC_OFFST4  [F0B0]
**         AD control register         : ADC_OFFST5  [F0B1]
**         AD control register         : ADC_OFFST6  [F0B2]
**         AD control register         : ADC_OFFST7  [F0B3]
**         AD control register         : ADC_PWR     [F0B4]
**         AD control register         : ADC_CAL     [F0B5]
**         AD control register         : ADC_CLIST3  [F085]
**         AD control register         : ADC_CLIST4  [F086]
**         AD control register         : ADC_RDY     [F089]
**         User handling procedure     : not specified
**         Number of conversions       : 1
**         AD resolution               : 12-bit
**
**         Input pins
**
**              Port name              : GPIOA
**              Bit number (in port)   : 0
**              Bit mask of the port   : 0001
**              Port data register     : GPIO_A_DATA [F141]
**              Port control register  : GPIO_A_DDIR [F142]
**              Port function register : GPIO_A_PEREN [F143]
**
**              Port name              : GPIOA
**              Bit number (in port)   : 1
**              Bit mask of the port   : 0002
**              Port data register     : GPIO_A_DATA [F141]
**              Port control register  : GPIO_A_DDIR [F142]
**              Port function register : GPIO_A_PEREN [F143]
**
**              Port name              : GPIOA
**              Bit number (in port)   : 2
**              Bit mask of the port   : 0004
**              Port data register     : GPIO_A_DATA [F141]
**              Port control register  : GPIO_A_DDIR [F142]
**              Port function register : GPIO_A_PEREN [F143]
**
**              Port name              : GPIOB
**              Bit number (in port)   : 1
**              Bit mask of the port   : 0002
**              Port data register     : GPIO_B_DATA [F151]
**              Port control register  : GPIO_B_DDIR [F152]
**              Port function register : GPIO_B_PEREN [F153]
**
**              Port name              : GPIOB
**              Bit number (in port)   : 5
**              Bit mask of the port   : 0020
**              Port data register     : GPIO_B_DATA [F151]
**              Port control register  : GPIO_B_DDIR [F152]
**              Port function register : GPIO_B_PEREN [F153]
**
**              Port name              : GPIOB
**              Bit number (in port)   : 7
**              Bit mask of the port   : 0080
**              Port data register     : GPIO_B_DATA [F151]
**              Port control register  : GPIO_B_DDIR [F152]
**              Port function register : GPIO_B_PEREN [F153]
**
**         Initialization:
**              Conversion             : Enabled
**              Event                  : Enabled
**         High speed mode
**             Prescaler               : divide-by-6
**     Contents  :
**         Enable           - byte AD1_Enable(void);
**         Disable          - byte AD1_Disable(void);
**         Measure          - byte AD1_Measure(bool WaitForResult);
**         EnableIntTrigger - byte AD1_EnableIntTrigger(void);
**         GetValue16       - byte AD1_GetValue16(word *Values);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

/* MODULE AD1. */

#ifndef __AD1
#define __AD1

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* MODULE AD1. */



byte AD1_Enable(void);
/*
** ===================================================================
**     Method      :  AD1_Enable (component ADC)
**
**     Description :
**         Enables A/D converter bean. <Events> may be generated
**         (<DisableEvent>/<EnableEvent>). If possible, this method
**         switches on A/D converter device, voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte AD1_Disable(void);
/*
** ===================================================================
**     Method      :  AD1_Disable (component ADC)
**
**     Description :
**         Disables A/D converter bean. No <events> will be generated.
**         If possible, this method switches off A/D converter device,
**         voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte AD1_Measure(bool WaitForResult);
/*
** ===================================================================
**     Method      :  AD1_Measure (component ADC)
**
**     Description :
**         This method performs one measurement on all channels that
**         are set in the bean inspector. (Note: If the <number of
**         conversions> is more than one the conversion of A/D channels
**         is performed specified number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result of a
**                           conversion. If <interrupt service> is
**                           disabled, A/D peripheral doesn't support
**                           measuring all channels at once or Autoscan
**                           mode property isn't enabled and at the same
**                           time the <number of channel> is greater
**                           than 1, then the WaitForResult parameter is
**                           ignored and the method waits for each
**                           result every time. If the <interrupt
**                           service> is disabled and a <number of
**                           conversions> is greater than 1, the
**                           parameter is ignored and the method also
**                           waits for each result every time.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
** ===================================================================
*/

byte AD1_EnableIntTrigger(void);
/*
** ===================================================================
**     Method      :  AD1_EnableIntTrigger (component ADC)
**
**     Description :
**         Enables the internal trigger mode. A conversion of all
**         channels that are set in the bean inspector will be launched
**         by an internal sync pulse. If the <Number of conversions> is
**         greater than 1, a conversion will be launched more than once
**         (by an internal signal) according to <Number of conversions>.
**         It's possible to disable the trigger mode by <Stop> method.
**         Version specific information for other derivatives than
**         Freescale HCS12 and HCS12X ] 
**         This EnableIntTrigger method is available only when the
**         <Internal trigger> property is enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_BUSY - A conversion is already running
** ===================================================================
*/

byte AD1_GetValue16(word *Values);
/*
** ===================================================================
**     Method      :  AD1_GetValue16 (component ADC)
**
**     Description :
**         This method returns the last measured values of all channels
**         justified to the left. Compared with <GetValue> method this
**         method returns more accurate result if the <number of
**         conversions> is greater than 1 and <AD resolution> is less
**         than 16 bits. In addition, the user code dependency on <AD
**         resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Values          - Pointer to the array that contains
**                           the measured data.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
** ===================================================================
*/

void AD1_Init(void);
/*
** ===================================================================
**     Method      :  AD1_Init (component ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the beans 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END AD1. */

#endif /* ifndef __AD1 */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.00 [04.35]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/
