/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : Resolver.H
**     Project   : PmsmFocDrv
**     Processor : MC56F8257
**     Component : SynchroMaster
**     Version   : Component 02.322, Driver 02.02, CPU db: 3.00.231
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 2014/4/25, 9:32
**     Abstract  :
**         This bean "SynchroMaster" implements MASTER part of synchronous
**         serial master-slave communication.
**     Settings  :
**         Synchro type                : MASTER
**
**         Serial channel              : QSPI0
**
**         Protocol
**             Init baud rate          : 1_875MHz
**             Clock edge              : falling
**             Width                   : 12 bits
**             Empty character         : 8
**             Empty char. on input    : IGNORED
**
**         Registers
**             Input buffer            : QSPI0_DRCV [F202]
**             Output buffer           : QSPI0_DXMIT [F203]
**             Control register        : QSPI0_SCTRL [F200]
**             Mode register           : QSPI0_DSCTRL [F201]
**             Baud setting reg.       : QSPI0_SCTRL [F200]
**
**
**
**         Used pins                   :
**         ----------------------------------------------------------
**              Function    | On package |    Name
**         ----------------------------------------------------------
**               Input      |     33     |  GPIOC8_MISO_RXD0
**               Clock      |     34     |  GPIOC9_SCLK_XB_IN4
**           Select slave   |     32     |  GPIOC7_SS_TXD0
**         ----------------------------------------------------------
**
**     Contents  :
**         Enable          - byte Resolver_Enable(void);
**         Disable         - byte Resolver_Disable(void);
**         RecvChar        - byte Resolver_RecvChar(Resolver_TComData *Chr);
**         SendChar        - byte Resolver_SendChar(Resolver_TComData Chr);
**         GetCharsInRxBuf - word Resolver_GetCharsInRxBuf(void);
**         GetCharsInTxBuf - word Resolver_GetCharsInTxBuf(void);
**         PutSSVal        - void Resolver_PutSSVal(bool Val);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __Resolver
#define __Resolver

/* MODULE Resolver. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

#include "Cpu.h"


#ifndef __BWUserType_Resolver_TError
#define __BWUserType_Resolver_TError
  typedef union {
    byte err;
    struct {
      bool OverRun  : 1;               /* OverRun error flag */
      bool RxBufOvf : 1;               /* Rx buffer full error flag */
      bool FaultErr : 1;               /* Fault mode error flag */
    }errName;
  } Resolver_TError;                   /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */
#endif

#define Resolver_EOF 8                 /* Empty character */

#ifndef __BWUserType_Resolver_TComData
#define __BWUserType_Resolver_TComData
  typedef word Resolver_TComData;      /* User type for communication. Size of this type depends on the communication data witdh. */
#endif


byte Resolver_Enable(void);
/*
** ===================================================================
**     Method      :  Resolver_Enable (component SynchroMaster)
**
**     Description :
**         Enable the bean - it starts send and receive functions.
**         Events may be generated ("DisableEvent"/"EnableEvent").
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Resolver_Disable(void);
/*
** ===================================================================
**     Method      :  Resolver_Disable (component SynchroMaster)
**
**     Description :
**         Disable the bean - it stops the send and receive functions.
**         No events will be generated. Note: When this method is
**         called while a transmission is in progress, the data being
**         transmitted/received may be lost.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Resolver_RecvChar(Resolver_TComData *Chr);
/*
** ===================================================================
**     Method      :  Resolver_RecvChar (component SynchroMaster)
**
**     Description :
**         If any data is received, this method returns one character,
**         otherwise it returns an error code (it does not wait for
**         data).
**         Version specific information for Freescale 56800 derivatives
**         ] 
**         DMA mode:
**         If DMA controller is available on selected CPU and receiver
**         is configured to use DMA controller then this method only
**         sets the selected DMA channel. Status of the DMA transfer
**         can then be checked using method GetCharsInRxBuf. See
**         typical usage for details about communication using DMA.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - A pointer to the received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_OVERRUN - Overrun error was detected
**                           from the last char or block received. In
**                           polling mode, this error code is returned
**                           only when the hardware supports detection
**                           of the overrun error. 
**                           ERR_FAULT - Fault error was detected from
**                           the last char or block received. This error
**                           may not be supported on some CPUs (see
**                           generated code).
** ===================================================================
*/

byte Resolver_SendChar(Resolver_TComData Chr);
/*
** ===================================================================
**     Method      :  Resolver_SendChar (component SynchroMaster)
**
**     Description :
**         Sends one character to the channel.
**         Version specific information for Freescale 56800 derivatives
**         ] 
**         DMA mode:
**         If DMA controller is available on the selected CPU and the
**         transmitter is configured to use DMA controller then this
**         method only sets the selected DMA channel. The status of the
**         DMA transfer can then be checked using GetCharsInTxBuf
**         method. See the typical usage for details about
**         communication using DMA.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled (only if
**                           output DMA is supported and enabled)
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

#define Resolver_GetCharsInRxBuf() (getRegBit(QSPI0_SCTRL,SPRF)?(word)1:(word)0) /* Return number of chars in receive buffer */
/*
** ===================================================================
**     Method      :  Resolver_GetCharsInRxBuf (component SynchroMaster)
**
**     Description :
**         Returns the number of characters in the input buffer.
**         Note: If the Interrupt service is disabled, and the Ignore
**         empty character is set to yes, and a character has been
**         received, then this method returns 1 although it was an
**         empty character.
**         Version specific information for Freescale 56800 derivatives
**         ] 
**         DMA mode:
**         If DMA controller is available on the selected CPU and the
**         receiver is configured to use DMA controller then this
**         method returns the number of characters in the receive
**         buffer.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the input buffer.
** ===================================================================
*/

word Resolver_GetCharsInTxBuf(void);
/*
** ===================================================================
**     Method      :  Resolver_GetCharsInTxBuf (component SynchroMaster)
**
**     Description :
**         Returns the number of characters in the output buffer.
**         Version specific information for Freescale 56800 derivatives
**         ] 
**         DMA mode:
**         If DMA controller is available on the selected CPU and the
**         transmitter is configured to use DMA controller then this
**         method returns the number of characters in the transmit
**         buffer.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the output buffer.
** ===================================================================
*/

#define Resolver_PutSSVal(Val) (setRegBitVal(QSPI0_DSCTRL, SSB_DATA, Val))
/*
** ===================================================================
**     Method      :  Resolver_PutSSVal (component SynchroMaster)
**
**     Description :
**         The value to drive on the SS pin. This method is not
**         available if <Automatic mode> of SS pin is enabled or
**         <Strobe mode> of SS pin is enabled. This is available if <SS
**         pin direction> is set to Output.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Val             - Output value. Possible values:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
**     Returns     : Nothing
** ===================================================================
*/

void Resolver_Init(void);
/*
** ===================================================================
**     Method      :  Resolver_Init (component SynchroMaster)
**
**     Description :
**         Initializes the associated peripheral(s) and the beans 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END Resolver. */

#endif /* ifndef __Resolver */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.00 [04.35]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/
